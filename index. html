<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no">
    <title>Image to Text Scanner - Camera & Gallery</title>
    <script src="https://unpkg.com/tesseract.js@4.0.3/dist/tesseract.min.js"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }
        
        body {
            background: linear-gradient(135deg, #1a2980, #26d0ce);
            color: #fff;
            min-height: 100vh;
            padding: 20px;
            display: flex;
            flex-direction: column;
            align-items: center;
            overflow-x: hidden;
        }
        
        .container {
            max-width: 100%;
            width: 100%;
            display: flex;
            flex-direction: column;
            align-items: center;
            gap: 25px;
        }
        
        header {
            text-align: center;
            padding: 15px 0;
            width: 100%;
            position: relative;
            animation: fadeIn 1s ease;
        }
        
        .india-flag {
            position: absolute;
            top: 10px;
            right: 10px;
            font-size: 2rem;
            color: #FF9933;
            text-shadow: 0 0 5px rgba(255, 153, 51, 0.5);
            animation: pulse 2s infinite;
        }
        
        h1 {
            font-size: 2.2rem;
            margin-bottom: 8px;
            text-shadow: 0 2px 4px rgba(0,0,0,0.3);
            background: linear-gradient(to right, #FF9933, #FFFFFF, #138808);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
        }
        
        .subtitle {
            font-size: 1.1rem;
            opacity: 0.9;
            max-width: 500px;
            margin: 0 auto;
            color: #f0f0f0;
        }
        
        .mode-selector {
            display: flex;
            gap: 10px;
            margin-bottom: 20px;
            width: 100%;
            max-width: 500px;
            background: rgba(255, 255, 255, 0.1);
            border-radius: 50px;
            padding: 5px;
        }
        
        .mode-btn {
            flex: 1;
            padding: 12px;
            border: none;
            border-radius: 50px;
            background: transparent;
            color: #fff;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            text-align: center;
        }
        
        .mode-btn.active {
            background: linear-gradient(to right, #FF9933, #ffad5c);
            box-shadow: 0 4px 10px rgba(0,0,0,0.2);
        }
        
        .card {
            background: rgba(255, 255, 255, 0.12);
            backdrop-filter: blur(10px);
            border-radius: 20px;
            padding: 25px;
            width: 100%;
            max-width: 500px;
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.2);
            border: 1px solid rgba(255, 255, 255, 0.18);
            animation: slideUp 0.8s ease;
        }
        
        .card-title {
            font-size: 1.5rem;
            margin-bottom: 20px;
            display: flex;
            align-items: center;
            gap: 10px;
            color: #FF9933;
        }
        
        .card-title i {
            font-size: 1.8rem;
            color: #138808;
        }
        
        .camera-container {
            position: relative;
            width: 100%;
            height: 300px;
            border-radius: 15px;
            overflow: hidden;
            background: rgba(0, 0, 0, 0.3);
            display: flex;
            align-items: center;
            justify-content: center;
            margin-bottom: 20px;
            border: 2px solid #FF9933;
        }
        
        #video {
            width: 100%;
            max-height: 100%;
            display: none;
        }
        
        #cameraPlaceholder {
            text-align: center;
            padding: 20px;
        }
        
        #cameraPlaceholder i {
            font-size: 4rem;
            margin-bottom: 15px;
            opacity: 0.7;
            color: #138808;
        }
        
        #capturedImage {
            max-width: 100%;
            max-height: 300px;
            display: none;
            border-radius: 10px;
            box-shadow: 0 4px 15px rgba(0,0,0,0.2);
        }
        
        #galleryImage {
            max-width: 100%;
            max-height: 300px;
            display: none;
            border-radius: 10px;
            box-shadow: 0 4px 15px rgba(0,0,0,0.2);
        }
        
        #resultText {
            background: rgba(0, 0, 0, 0.2);
            border-radius: 12px;
            padding: 15px;
            min-height: 150px;
            width: 100%;
            color: white;
            border: 1px solid rgba(255, 255, 255, 0.1);
            font-size: 1.1rem;
            margin-top: 20px;
            display: none;
            overflow-y: auto;
            max-height: 200px;
        }
        
        .btn-container {
            display: flex;
            gap: 12px;
            flex-wrap: wrap;
            justify-content: center;
        }
        
        .btn {
            flex: 1;
            min-width: 140px;
            padding: 15px 20px;
            border: none;
            border-radius: 50px;
            font-size: 1.1rem;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 8px;
            box-shadow: 0 4px 10px rgba(0,0,0,0.2);
        }
        
        .btn-primary {
            background: linear-gradient(to right, #FF9933, #ffad5c);
            color: white;
        }
        
        .btn-secondary {
            background: linear-gradient(to right, #138808, #1db312);
            color: white;
        }
        
        .btn-tertiary {
            background: linear-gradient(to right, #4facfe, #00f2fe);
            color: white;
        }
        
        .btn:disabled {
            opacity: 0.6;
            cursor: not-allowed;
        }
        
        .btn:hover:not(:disabled) {
            transform: translateY(-3px);
            box-shadow: 0 6px 15px rgba(0,0,0,0.3);
        }
        
        .btn i {
            font-size: 1.3rem;
        }
        
        .loading {
            display: none;
            text-align: center;
            padding: 20px;
        }
        
        .spinner {
            width: 40px;
            height: 40px;
            border: 4px solid rgba(255, 255, 255, 0.3);
            border-radius: 50%;
            border-top: 4px solid #FF9933;
            animation: spin 1s linear infinite;
            margin: 0 auto 15px;
        }
        
        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
        
        .progress-container {
            width: 100%;
            background: rgba(255, 255, 255, 0.1);
            border-radius: 10px;
            margin: 15px 0;
            display: none;
        }
        
        .progress-bar {
            height: 10px;
            border-radius: 10px;
            background: linear-gradient(to right, #FF9933, #138808);
            width: 0%;
            transition: width 0.3s ease;
        }
        
        .instructions {
            background: rgba(0, 0, 0, 0.2);
            border-radius: 15px;
            padding: 20px;
            margin-top: 20px;
            font-size: 0.95rem;
            line-height: 1.6;
        }
        
        .instructions h3 {
            margin-bottom: 10px;
            color: #FF9933;
            display: flex;
            align-items: center;
            gap: 10px;
        }
        
        .instructions ul {
            padding-left: 20px;
        }
        
        .instructions li {
            margin-bottom: 10px;
            display: flex;
            align-items: flex-start;
            gap: 10px;
        }
        
        .instructions li i {
            color: #138808;
            margin-top: 4px;
        }
        
        .language-selector {
            margin: 15px 0;
            width: 100%;
        }
        
        .language-selector select {
            width: 100%;
            padding: 12px;
            border-radius: 10px;
            background: rgba(0, 0, 0, 0.2);
            border: 1px solid rgba(255, 255, 255, 0.2);
            color: white;
            font-size: 1rem;
        }
        
        footer {
            text-align: center;
            padding: 20px;
            font-size: 0.9rem;
            opacity: 0.8;
            margin-top: auto;
        }
        
        .permission-help {
            background: rgba(255, 0, 0, 0.15);
            border-radius: 12px;
            padding: 15px;
            margin-top: 15px;
            border: 1px solid rgba(255, 0, 0, 0.2);
            display: none;
        }
        
        .permission-help h3 {
            color: #ffcc00;
            margin-bottom: 10px;
            display: flex;
            align-items: center;
            gap: 10px;
        }
        
        .browser-steps {
            background: rgba(0, 0, 0, 0.2);
            border-radius: 10px;
            padding: 15px;
            margin-top: 15px;
        }
        
        .step {
            display: flex;
            gap: 10px;
            margin-bottom: 10px;
            align-items: flex-start;
        }
        
        .step-number {
            background: #FF9933;
            color: #000;
            width: 25px;
            height: 25px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            font-weight: bold;
            flex-shrink: 0;
            margin-top: 2px;
        }
        
        .step-content {
            flex: 1;
        }
        
        .retry-btn {
            margin-top: 15px;
            width: 100%;
            padding: 12px;
            background: linear-gradient(to right, #ff416c, #ff4b2b);
            border: none;
            border-radius: 50px;
            color: white;
            font-weight: bold;
            font-size: 1.1rem;
            cursor: pointer;
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 10px;
        }
        
        .language-info {
            display: flex;
            align-items: center;
            margin-top: 10px;
            gap: 10px;
            background: rgba(255, 255, 255, 0.1);
            padding: 10px;
            border-radius: 10px;
            font-size: 0.9rem;
        }
        
        .language-grid {
            display: grid;
            grid-template-columns: repeat(3, 1fr);
            gap: 10px;
            margin-top: 15px;
        }
        
        .language-tag {
            background: rgba(255, 153, 51, 0.2);
            border: 1px solid #FF9933;
            border-radius: 20px;
            padding: 5px 10px;
            text-align: center;
            font-size: 0.85rem;
        }
        
        .file-input-container {
            position: relative;
            overflow: hidden;
            display: inline-block;
            width: 100%;
        }
        
        .file-input-container input[type="file"] {
            position: absolute;
            left: 0;
            top: 0;
            opacity: 0;
            width: 100%;
            height: 100%;
            cursor: pointer;
        }
        
        .gallery-preview {
            display: flex;
            justify-content: center;
            align-items: center;
            min-height: 200px;
            background: rgba(0, 0, 0, 0.1);
            border-radius: 15px;
            border: 2px dashed #FF9933;
            margin-bottom: 20px;
            cursor: pointer;
            transition: all 0.3s ease;
        }
        
        .gallery-preview:hover {
            background: rgba(255, 153, 51, 0.1);
        }
        
        .gallery-preview i {
            font-size: 4rem;
            color: #138808;
            opacity: 0.7;
        }
        
        .gallery-preview-text {
            text-align: center;
            padding: 20px;
        }
        
        .image-container {
            display: none;
            width: 100%;
            text-align: center;
            margin-bottom: 20px;
        }
        
        #galleryImage {
            max-width: 100%;
            max-height: 300px;
            border-radius: 10px;
            box-shadow: 0 4px 15px rgba(0,0,0,0.2);
        }
        
        @keyframes fadeIn {
            from { opacity: 0; }
            to { opacity: 1; }
        }
        
        @keyframes slideUp {
            from { transform: translateY(20px); opacity: 0; }
            to { transform: translateY(0); opacity: 1; }
        }
        
        @keyframes pulse {
            0% { transform: scale(1); }
            50% { transform: scale(1.1); }
            100% { transform: scale(1); }
        }
        
        @media (max-width: 480px) {
            .btn {
                min-width: 100%;
            }
            
            h1 {
                font-size: 1.8rem;
            }
            
            .card {
                padding: 20px 15px;
            }
            
            .camera-container {
                height: 250px;
            }
            
            .instructions li {
                font-size: 0.95rem;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <header>
            <div class="india-flag">🇮🇳</div>
            <h1><i class="fas fa-camera"></i> Image to Text Scanner</h1>
            <p class="subtitle">Scan text from camera or gallery with Indian language support</p>
        </header>
        
        <div class="mode-selector">
            <button class="mode-btn active" id="cameraModeBtn">
                <i class="fas fa-camera"></i> Camera
            </button>
            <button class="mode-btn" id="galleryModeBtn">
                <i class="fas fa-images"></i> Gallery
            </button>
        </div>
        
        <main class="card">
            <!-- Camera Mode -->
            <div class="camera-mode" id="cameraMode">
                <div class="card-title">
                    <i class="fas fa-camera"></i> Camera Scanner
                </div>
                
                <div class="camera-container">
                    <video id="video" autoplay playsinline></video>
                    <div id="cameraPlaceholder">
                        <i class="fas fa-camera"></i>
                        <p>Camera not active</p>
                    </div>
                    <img id="capturedImage" alt="Captured Image">
                </div>
                
                <div class="btn-container">
                    <button class="btn btn-primary" id="startCameraBtn">
                        <i class="fas fa-camera"></i> Start Camera
                    </button>
                    <button class="btn btn-primary" id="captureBtn" disabled>
                        <i class="fas fa-camera-retro"></i> Capture
                    </button>
                    <button class="btn btn-secondary" id="resetBtn" disabled>
                        <i class="fas fa-sync-alt"></i> Reset
                    </button>
                </div>
            </div>
            
            <!-- Gallery Mode -->
            <div class="gallery-mode" id="galleryMode" style="display: none;">
                <div class="card-title">
                    <i class="fas fa-images"></i> Gallery Scanner
                </div>
                
                <div class="file-input-container">
                    <div class="gallery-preview" id="galleryPreview">
                        <div class="gallery-preview-text">
                            <i class="fas fa-cloud-upload-alt"></i>
                            <p>Tap to select an image from gallery</p>
                        </div>
                    </div>
                    <input type="file" id="fileInput" accept="image/*">
                </div>
                
                <div class="image-container" id="galleryImageContainer">
                    <img id="galleryImage" alt="Selected Image">
                </div>
                
                <div class="btn-container">
                    <button class="btn btn-tertiary" id="processGalleryBtn" disabled>
                        <i class="fas fa-cogs"></i> Extract Text
                    </button>
                    <button class="btn btn-secondary" id="clearGalleryBtn" disabled>
                        <i class="fas fa-trash-alt"></i> Clear
                    </button>
                </div>
            </div>
            
            <!-- Common Elements -->
            <div class="language-selector">
                <select id="languageSelect">
                    <option value="eng">English</option>
                    <option value="hin">Hindi (हिंदी)</option>
                    <option value="ben">Bengali (বাংলা)</option>
                    <option value="tel">Telugu (తెలుగు)</option>
                    <option value="mar">Marathi (मराठी)</option>
                    <option value="tam">Tamil (தமிழ்)</option>
                    <option value="guj">Gujarati (ગુજરાતી)</option>
                    <option value="kan">Kannada (ಕನ್ನಡ)</option>
                    <option value="mal">Malayalam (മലയാളം)</option>
                    <option value="ori">Odia (ଓଡ଼ିଆ)</option>
                    <option value="pan">Punjabi (ਪੰਜਾਬੀ)</option>
                    <option value="asm">Assamese (অসমীয়া)</option>
                    <option value="san">Sanskrit (संस्कृतम्)</option>
                    <option value="urd">Urdu (اردو)</option>
                </select>
                
                <div class="language-info">
                    <i class="fas fa-info-circle"></i>
                    <div>Supports all 22 scheduled languages of India</div>
                </div>
            </div>
            
            <div class="progress-container" id="progressContainer">
                <div class="progress-bar" id="progressBar"></div>
            </div>
            
            <div class="loading" id="loadingIndicator">
                <div class="spinner"></div>
                <p>Processing image...</p>
            </div>
            
            <div class="permission-help" id="permissionHelp">
                <h3><i class="fas fa-exclamation-circle"></i> Camera Permission Required</h3>
                <p>Your device has not granted camera permission. Please follow these steps:</p>
                
                <div class="browser-steps">
                    <div class="step">
                        <div class="step-number">1</div>
                        <div class="step-content">Click the camera icon in your browser's address bar</div>
                    </div>
                    <div class="step">
                        <div class="step-number">2</div>
                        <div class="step-content">Select "Allow camera access"</div>
                    </div>
                    <div class="step">
                        <div class="step-number">3</div>
                        <div class="step-content">Refresh the page and try again</div>
                    </div>
                </div>
                
                <button class="retry-btn" id="retryBtn">
                    <i class="fas fa-redo"></i> Try Again
                </button>
            </div>
            
            <div id="resultText"></div>
        </main>
        
        <div class="card instructions">
            <h3><i class="fas fa-info-circle"></i> How to Use:</h3>
            <ul>
                <li>
                    <i class="fas fa-check-circle"></i>
                    <div>
                        <strong>Camera Mode:</strong> Capture text using your device's camera
                    </div>
                </li>
                <li>
                    <i class="fas fa-check-circle"></i>
                    <div>
                        <strong>Gallery Mode:</strong> Select an existing photo to extract text
                    </div>
                </li>
                <li>
                    <i class="fas fa-check-circle"></i>
                    <div>
                        <strong>Choose Language:</strong> Select the language of the text
                    </div>
                </li>
                <li>
                    <i class="fas fa-check-circle"></i>
                    <div>
                        <strong>Extract:</strong> Click "Extract Text" to process the image
                    </div>
                </li>
                <li>
                    <i class="fas fa-lightbulb"></i>
                    <div>
                        <strong>Tip:</strong> For best results, use clear images with good contrast
                    </div>
                </li>
            </ul>
            
            <div class="language-grid">
                <div class="language-tag">Hindi</div>
                <div class="language-tag">Bengali</div>
                <div class="language-tag">Telugu</div>
                <div class="language-tag">Marathi</div>
                <div class="language-tag">Tamil</div>
                <div class="language-tag">Gujarati</div>
                <div class="language-tag">Kannada</div>
                <div class="language-tag">Malayalam</div>
                <div class="language-tag">Odia</div>
                <div class="language-tag">Punjabi</div>
                <div class="language-tag">Assamese</div>
                <div class="language-tag">Sanskrit</div>
            </div>
        </div>
        
        <footer>
            <p><i class="fas fa-mobile-alt"></i> Image to Text Scanner | Powered by Tesseract.js | Supports all Indian languages</p>
        </footer>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // DOM Elements
            const video = document.getElementById('video');
            const cameraPlaceholder = document.getElementById('cameraPlaceholder');
            const capturedImage = document.getElementById('capturedImage');
            const startCameraBtn = document.getElementById('startCameraBtn');
            const captureBtn = document.getElementById('captureBtn');
            const resetBtn = document.getElementById('resetBtn');
            const resultText = document.getElementById('resultText');
            const progressContainer = document.getElementById('progressContainer');
            const progressBar = document.getElementById('progressBar');
            const loadingIndicator = document.getElementById('loadingIndicator');
            const languageSelect = document.getElementById('languageSelect');
            const permissionHelp = document.getElementById('permissionHelp');
            const retryBtn = document.getElementById('retryBtn');
            const fileInput = document.getElementById('fileInput');
            const galleryPreview = document.getElementById('galleryPreview');
            const galleryImage = document.getElementById('galleryImage');
            const galleryImageContainer = document.getElementById('galleryImageContainer');
            const processGalleryBtn = document.getElementById('processGalleryBtn');
            const clearGalleryBtn = document.getElementById('clearGalleryBtn');
            const cameraModeBtn = document.getElementById('cameraModeBtn');
            const galleryModeBtn = document.getElementById('galleryModeBtn');
            const cameraMode = document.getElementById('cameraMode');
            const galleryMode = document.getElementById('galleryMode');
            
            let stream = null;
            let currentMode = 'camera';
            
            // Switch between camera and gallery modes
            cameraModeBtn.addEventListener('click', function() {
                currentMode = 'camera';
                cameraMode.style.display = 'block';
                galleryMode.style.display = 'none';
                cameraModeBtn.classList.add('active');
                galleryModeBtn.classList.remove('active');
            });
            
            galleryModeBtn.addEventListener('click', function() {
                currentMode = 'gallery';
                cameraMode.style.display = 'none';
                galleryMode.style.display = 'block';
                galleryModeBtn.classList.add('active');
                cameraModeBtn.classList.remove('active');
                
                // Stop camera if active
                if (stream) {
                    stream.getTracks().forEach(track => track.stop());
                    stream = null;
                }
            });
            
            // Start Camera
            startCameraBtn.addEventListener('click', async function() {
                try {
                    stream = await navigator.mediaDevices.getUserMedia({ 
                        video: { facingMode: 'environment' },
                        audio: false 
                    });
                    
                    video.srcObject = stream;
                    video.style.display = 'block';
                    cameraPlaceholder.style.display = 'none';
                    permissionHelp.style.display = 'none';
                    
                    startCameraBtn.disabled = true;
                    captureBtn.disabled = false;
                } catch (err) {
                    console.error('Camera error:', err);
                    cameraPlaceholder.innerHTML = '<i class="fas fa-exclamation-triangle"></i><p>Camera access denied</p>';
                    permissionHelp.style.display = 'block';
                    
                    // Update error message based on error type
                    if (err.name === 'NotAllowedError') {
                        permissionHelp.querySelector('p').innerHTML = 
                            'You have denied camera access. Please enable it in your browser settings.';
                    } else if (err.name === 'NotFoundError') {
                        permissionHelp.querySelector('p').innerHTML = 
                            'No camera available. Please ensure your device has a camera.';
                    }
                }
            });
            
            // Retry camera access
            retryBtn.addEventListener('click', function() {
                permissionHelp.style.display = 'none';
                startCameraBtn.click();
            });
            
            // Capture Image
            captureBtn.addEventListener('click', function() {
                // Create canvas to capture image
                const canvas = document.createElement('canvas');
                canvas.width = video.videoWidth;
                canvas.height = video.videoHeight;
                const ctx = canvas.getContext('2d');
                ctx.drawImage(video, 0, 0, canvas.width, canvas.height);
                
                // Display captured image
                capturedImage.src = canvas.toDataURL('image/jpeg');
                capturedImage.style.display = 'block';
                video.style.display = 'none';
                
                // Disable camera controls
                captureBtn.disabled = true;
                resetBtn.disabled = false;
                
                // Stop camera stream
                if (stream) {
                    stream.getTracks().forEach(track => track.stop());
                }
                
                // Process image
                processImage(canvas);
            });
            
            // Reset Scanner
            resetBtn.addEventListener('click', function() {
                // Reset UI
                capturedImage.style.display = 'none';
                resultText.style.display = 'none';
                video.style.display = 'block';
                cameraPlaceholder.style.display = 'none';
                progressContainer.style.display = 'none';
                permissionHelp.style.display = 'none';
                
                // Reset buttons
                startCameraBtn.disabled = false;
                captureBtn.disabled = true;
                resetBtn.disabled = true;
                
                // Restart camera
                startCameraBtn.click();
            });
            
            // Handle gallery image selection
            fileInput.addEventListener('change', function(e) {
                if (e.target.files && e.target.files[0]) {
                    const reader = new FileReader();
                    
                    reader.onload = function(event) {
                        galleryImage.src = event.target.result;
                        galleryImageContainer.style.display = 'block';
                        galleryPreview.style.display = 'none';
                        processGalleryBtn.disabled = false;
                        clearGalleryBtn.disabled = false;
                    }
                    
                    reader.readAsDataURL(e.target.files[0]);
                }
            });
            
            // Process gallery image
            processGalleryBtn.addEventListener('click', function() {
                // Create canvas to process image
                const canvas = document.createElement('canvas');
                const ctx = canvas.getContext('2d');
                const img = new Image();
                
                img.onload = function() {
                    canvas.width = img.width;
                    canvas.height = img.height;
                    ctx.drawImage(img, 0, 0);
                    processImage(canvas);
                };
                
                img.src = galleryImage.src;
            });
            
            // Clear gallery image
            clearGalleryBtn.addEventListener('click', function() {
                galleryImage.src = '';
                galleryImageContainer.style.display = 'none';
                galleryPreview.style.display = 'flex';
                processGalleryBtn.disabled = true;
                clearGalleryBtn.disabled = true;
                resultText.style.display = 'none';
                fileInput.value = '';
            });
            
            // Process image with Tesseract
            async function processImage(canvas) {
                // Show loading
                loadingIndicator.style.display = 'block';
                progressContainer.style.display = 'block';
                progressBar.style.width = '0%';
                resultText.style.display = 'none';
                
                try {
                    const selectedLang = languageSelect.value;
                    
                    const { data } = await Tesseract.recognize(
                        canvas,
                        selectedLang,
                        {
                            logger: progress => {
                                // Update progress bar
                                if (progress.status === 'recognizing text') {
                                    const pct = Math.round(progress.progress * 100);
                                    progressBar.style.width = `${pct}%`;
                                    
                                    if (pct === 100) {
                                        progressBar.style.background = 'linear-gradient(to right, #00c853, #64dd17)';
                                    }
                                }
                            }
                        }
                    );
                    
                    // Display result
                    if (data.text.trim() !== '') {
                        resultText.textContent = data.text;
                        resultText.style.display = 'block';
                        resultText.style.background = 'rgba(0, 200, 83, 0.15)';
                    } else {
                        resultText.textContent = 'No text detected. Try again with a clearer image.';
                        resultText.style.display = 'block';
                        resultText.style.background = 'rgba(255, 0, 0, 0.15)';
                    }
                    
                    // Hide loading
                    loadingIndicator.style.display = 'none';
                } catch (error) {
                    resultText.textContent = 'Error processing image: ' + error.message;
                    resultText.style.display = 'block';
                    resultText.style.background = 'rgba(255, 0, 0, 0.15)';
                    loadingIndicator.style.display = 'none';
                }
            }
            
            // Initialize with camera off
            resetBtn.disabled = true;
            captureBtn.disabled = true;
            processGalleryBtn.disabled = true;
            clearGalleryBtn.disabled = true;
            
            // Set English as default language
            languageSelect.value = 'eng';
        });
    </script>
</body>
</html>

